name: Update README with API Data

on:
  schedule:
    - cron: '* * * * *' # Runs every minute

jobs:
  update-readme:
    runs-on: ubuntu-latest
    

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3


    - name: Fetch OHLCV data
      env: 
        TITLE: WETH/USDC
        CHAIN: eth #Specify the chain - eth/bsc/polygon_pos/avax/movr/cro/one/boba/ftm/bch, check entire list: https://api.geckoterminal.com/api/v2/networks
        POOL: '0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640' #Specify the pool address - currently WETH/USDC pool
        TIMEFRAME: day #Specify the timeframe - day/hour/minute
        AGGREGATE: 1 #Specify the aggregate options - day: [1], hour: [1, 4, 12] minute: [1, 5, 15]
        LIMIT: 365 #Specify the limit - 100 to 1000
      run: |
        apiurl="https://api.geckoterminal.com/api/v2/networks/${CHAIN}/pools/${POOL}/ohlcv/${TIMEFRAME}?aggregate=${AGGREGATE}&limit=${LIMIT}"
        
        echo "$apiurl"

        response=$(curl -s "$apiurl")
            
        echo "Raw API response:"
        echo "$response"

        # Extracting dates and closing prices
        dates_array=($(echo "$response" | jq -r '.data.attributes.ohlcv_list[] | .[0]'))
        closes=$(echo "$response" | jq -r '.data.attributes.ohlcv_list[] | .[4]' | paste -sd, -)

        formatted_dates=()

        # Format the dates accordingly and ensure chronological order
        for date in "${dates_array[@]}"; do
          month=$(date -d @$date +%m)
          if [ "$month" -eq "01" ]; then
            formatted_dates+=("$(date -d @$date +%Y)")
          else
            formatted_dates+=("$(date -d @$date +%b)")
          fi
        done

        # Calculate min and max close prices for y-axis range
        min_close=$(echo "$closes" | tr ',' '\n' | sort -n | head -n1)
        max_close=$(echo "$closes" | tr ',' '\n' | sort -n | tail -n1)

        # Join the formatted dates into a comma-separated string
        dates=$(printf "%s," "${formatted_dates[@]}")
        dates=${dates%,} # Remove the trailing comma

        chart=$(cat <<EOF
        \`\`\`mermaid
        xychart-beta
          title "${TITLE}"
          x-axis [${dates}]
          y-axis "Closing Prices" ${min_close} --> ${max_close}
          line [${closes}]
        \`\`\`
        EOF)

        echo -e "## OHLCV Data Visualization\n\n${chart}" > README.md
        echo "Updated README.md content:"
        cat README.md

    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git remote set-url origin https://github-actions:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git add README.md
        git commit -m "Update README with latest DEX data" || echo "No changes to commit"
        git push